[{"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\index.js":"1","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\App.js":"2","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\reportWebVitals.js":"3","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Match.js":"4","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Join.js":"5","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchGenres.js":"6","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchMovies.js":"7","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Result.js":"8","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Card.js":"9","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Stack.js":"10"},{"size":589,"mtime":1614964826466,"results":"11","hashOfConfig":"12"},{"size":1398,"mtime":1620835726601,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":5043,"mtime":1620402824820,"results":"15","hashOfConfig":"12"},{"size":1363,"mtime":1620828875293,"results":"16","hashOfConfig":"12"},{"size":1216,"mtime":1615569897751,"results":"17","hashOfConfig":"12"},{"size":2419,"mtime":1620831769891,"results":"18","hashOfConfig":"12"},{"size":1762,"mtime":1619018945064,"results":"19","hashOfConfig":"12"},{"size":2747,"mtime":1620836073801,"results":"20","hashOfConfig":"12"},{"size":1123,"mtime":1620835640539,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1jl6uht",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\index.js",[],["45","46"],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\App.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\reportWebVitals.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Match.js",["47","48"],"import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, useHistory, useParams } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport swal from \"@sweetalert/with-react\";\r\n// components\r\nimport MatchGenres from \"./MatchGenres\";\r\nimport MatchMovies from \"./MatchMovies\";\r\nimport Result from \"./Result\";\r\n\r\nlet socket;\r\n\r\nconst Match = () => {\r\n  // UTILS\r\n  const slug = useParams();\r\n  const rapidApiKey = process.env.REACT_APP_API_KEY;\r\n  const socketEndPoint = \"localhost:5000\";\r\n  let history = useHistory();\r\n\r\n  // STATE\r\n  const [genres, setGenres] = useState([]);\r\n  const [userGenres, setUserGenres] = useState([]);\r\n  const [movies, setMovies] = useState([]);\r\n  const [userMovies, setUserMovies] = useState([]);\r\n  const [name, setName] = useState(slug.name);\r\n  const [room, setroom] = useState(slug.room);\r\n\r\n  //                           //\r\n  //       SOCKET GENERAL      //\r\n  //                           //\r\n  // Join/Leave Room\r\n  useEffect(() => {\r\n    socket = io(socketEndPoint);\r\n\r\n    socket.emit(\"join\", { name, room }, () => {});\r\n\r\n    return () => {\r\n      socket.emit(\"endConnection\", room);\r\n\r\n      socket.close();\r\n    };\r\n  }, [socketEndPoint, name, room]);\r\n\r\n  // Other Users Joining Room\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      swal({\r\n        content: <div>{message.text}</div>,\r\n        icon: \"info\",\r\n        button: \"OK!\",\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  //                           //\r\n  // GENRE FUNCTIONS & SOCKETS //\r\n  //                           //\r\n  const toggleGenre = (e, id) => {\r\n    if (e.target.style.backgroundColor === \"white\") {\r\n      e.target.style.backgroundColor = \"black\";\r\n    } else {\r\n      e.target.style.backgroundColor = \"white\";\r\n    }\r\n    if (e.target.style.color === \"black\") {\r\n      e.target.style.color = \"white\";\r\n    } else {\r\n      e.target.style.color = \"black\";\r\n    }\r\n\r\n    const genreIndex = userGenres.indexOf(id);\r\n    if (genreIndex === -1) {\r\n      setUserGenres((prevState) => [...prevState, id]);\r\n    } else {\r\n      setUserGenres((prevState) =>\r\n        prevState.filter((prev_id) => id !== prev_id)\r\n      );\r\n    }\r\n    socket.emit(\"updateGenres\", id);\r\n  };\r\n\r\n  const submitGenres = (e) => {\r\n    e.preventDefault();\r\n\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text:\r\n        \"Once you continue, the whole room will move forward with everyone's currently chosen genres.\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n    }).then((willContinue) => {\r\n      if (willContinue) {\r\n        socket.emit(\"getGenres\");\r\n      }\r\n    });\r\n  };\r\n  // Receive Genres After Submission\r\n  useEffect(() => {\r\n    socket.on(\"receiveGenres\", (receivedGenres) => {\r\n      setUserGenres(receivedGenres);\r\n      history.push(`/match/${slug.name}/${slug.room}/movies`);\r\n    });\r\n  }, [history, slug.name, slug.room]);\r\n\r\n  //                           //\r\n  // MOVIE FUNCTIONS & SOCKETS //\r\n  //                           //\r\n  const toggleMovies = (e, id) => {\r\n    if (e.target.style.border === \"2px solid black\") {\r\n      e.target.style.border = \"2px solid green\";\r\n    } else {\r\n      e.target.style.border = \"2px solid black\";\r\n    }\r\n\r\n    const movieIndex = userMovies.indexOf(id);\r\n    if (movieIndex === -1) {\r\n      setUserMovies((prevState) => [...prevState, id]);\r\n      socket.emit(\"addMovies\", id);\r\n    } else {\r\n      setUserMovies((prevState) =>\r\n        prevState.filter((prev_id) => id !== prev_id)\r\n      );\r\n      socket.emit(\"removeMovies\", id);\r\n    }\r\n  };\r\n  const submitMovies = (e) => {\r\n    e.preventDefault();\r\n\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text:\r\n        \"Once you continue, matches will be found based on everyone's current selections.\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n    }).then((willContinue) => {\r\n      if (willContinue) {\r\n        socket.emit(\"getMovies\");\r\n      }\r\n    });\r\n  };\r\n  // Receive Movies After Submission\r\n  useEffect(() => {\r\n    socket.on(\"receiveMovies\", (receivedMovies) => {\r\n      console.log(\"received movies:\", receivedMovies);\r\n      setUserMovies(receivedMovies);\r\n      history.push(`/match/${slug.name}/${slug.room}/result`);\r\n    });\r\n  }, [history, slug.name, slug.room]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`/match/${slug.name}/${slug.room}/movies`}>\r\n        <MatchMovies\r\n          movies={movies}\r\n          setMovies={setMovies}\r\n          toggleMovies={toggleMovies}\r\n          submitMovies={submitMovies}\r\n          userGenres={userGenres}\r\n          rapidApiKey={rapidApiKey}\r\n        />\r\n      </Route>\r\n      <Route path={`/match/${slug.name}/${slug.room}/genres`}>\r\n        <MatchGenres\r\n          genres={genres}\r\n          setGenres={setGenres}\r\n          toggleGenre={toggleGenre}\r\n          submitGenres={submitGenres}\r\n          rapidApiKey={rapidApiKey}\r\n        />\r\n      </Route>\r\n      <Route path={`/match/${slug.name}/${slug.room}/result`}>\r\n        <Result userMovies={userMovies} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\nexport default Match;\r\n","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Join.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchGenres.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchMovies.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Result.js",["49"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst Result = ({ userMovies, rapidApiKey }) => {\r\n  const [products, setProducts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (userMovies.length !== 0) {\r\n      let requests = userMovies.map((id) => {\r\n        return new Promise((resolve, reject) => {\r\n          new Request(\r\n            `https://api.themoviedb.org/3/movie/${id}?api_key=${rapidApiKey}&language=en-US`,\r\n            { method: \"GET\" }\r\n          );\r\n        });\r\n      });\r\n      Promise.all(requests)\r\n        .then((body) => {\r\n          body.forEach((res) => {\r\n            if (res) {\r\n              setProducts((prev) => prev.push(JSON.parse(res)));\r\n            }\r\n          });\r\n          console.log(\"results from promise.all\", products);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [rapidApiKey, userMovies]);\r\n\r\n  if (userMovies.length === 0) {\r\n    return (\r\n      <div className=\"m-auto mt-20 w-80 md:w-1/2\">\r\n        <h1>No matches :(</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"m-auto mt-20 w-80 md:w-1/2\">\r\n        <h1>Here are your matches!</h1>\r\n        {products &&\r\n          products.map((item) => (\r\n            <div key={item.id}>\r\n              <h1>{item.title}</h1>\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w300/${item.poster_path}`}\r\n                alt=\"movie poster\"\r\n              />\r\n              <p>{item.overview}</p>\r\n              <div>\r\n                <p>Released: {item.release_date}</p>\r\n                <p>Language: {item.original_language}</p>\r\n                <p>Rating: {item.vote_average}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Result;\r\n","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Card.js",["50","51"],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Stack.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":24,"column":16,"nodeType":"58","messageId":"59","endLine":24,"endColumn":23},{"ruleId":"56","severity":1,"message":"60","line":25,"column":16,"nodeType":"58","messageId":"59","endLine":25,"endColumn":23},{"ruleId":"61","severity":1,"message":"62","line":27,"column":6,"nodeType":"63","endLine":27,"endColumn":31,"suggestions":"64"},{"ruleId":"56","severity":1,"message":"65","line":17,"column":10,"nodeType":"58","messageId":"59","endLine":17,"endColumn":14},{"ruleId":"56","severity":1,"message":"66","line":17,"column":16,"nodeType":"58","messageId":"59","endLine":17,"endColumn":23},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'setName' is assigned a value but never used.","Identifier","unusedVar","'setroom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.","ArrayExpression",["69"],"'vote' is assigned a value but never used.","'setVote' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [products, rapidApiKey, userMovies]",{"range":"72","text":"73"},[841,866],"[products, rapidApiKey, userMovies]"]