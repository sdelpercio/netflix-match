[{"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\index.js":"1","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\App.js":"2","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\reportWebVitals.js":"3","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Match.js":"4","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Join.js":"5","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchGenres.js":"6","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchMovies.js":"7","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Result.js":"8","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Card.js":"9","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Stack.js":"10"},{"size":589,"mtime":1614964826466,"results":"11","hashOfConfig":"12"},{"size":1398,"mtime":1620835726601,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":4850,"mtime":1620932986765,"results":"15","hashOfConfig":"12"},{"size":1363,"mtime":1620828875293,"results":"16","hashOfConfig":"12"},{"size":1216,"mtime":1615569897751,"results":"17","hashOfConfig":"12"},{"size":2436,"mtime":1620919773735,"results":"18","hashOfConfig":"12"},{"size":1520,"mtime":1620932832138,"results":"19","hashOfConfig":"12"},{"size":2747,"mtime":1620836073801,"results":"20","hashOfConfig":"12"},{"size":1123,"mtime":1620835640539,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1jl6uht",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\index.js",[],["47","48"],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\App.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\reportWebVitals.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Match.js",["49","50"],"import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, useHistory, useParams } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport swal from \"@sweetalert/with-react\";\r\n// components\r\nimport MatchGenres from \"./MatchGenres\";\r\nimport MatchMovies from \"./MatchMovies\";\r\nimport Result from \"./Result\";\r\n\r\nlet socket;\r\n\r\nconst Match = () => {\r\n  // UTILS\r\n  const slug = useParams();\r\n  const rapidApiKey = process.env.REACT_APP_API_KEY;\r\n  const socketEndPoint = \"localhost:5000\";\r\n  let history = useHistory();\r\n\r\n  // STATE\r\n  const [genres, setGenres] = useState([]);\r\n  const [userGenres, setUserGenres] = useState([]);\r\n  const [movies, setMovies] = useState([]);\r\n  const [userMovies, setUserMovies] = useState([]);\r\n  const [name, setName] = useState(slug.name);\r\n  const [room, setroom] = useState(slug.room);\r\n\r\n  //                           //\r\n  //       SOCKET GENERAL      //\r\n  //                           //\r\n  // Join/Leave Room\r\n  useEffect(() => {\r\n    socket = io(socketEndPoint);\r\n\r\n    socket.emit(\"join\", { name, room }, () => {});\r\n\r\n    return () => {\r\n      socket.emit(\"endConnection\", room);\r\n\r\n      socket.close();\r\n    };\r\n  }, [socketEndPoint, name, room]);\r\n\r\n  // Other Users Joining Room\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      swal({\r\n        content: <div>{message.text}</div>,\r\n        icon: \"info\",\r\n        button: \"OK!\",\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  //                           //\r\n  // GENRE FUNCTIONS & SOCKETS //\r\n  //                           //\r\n  const toggleGenre = (e, id) => {\r\n    if (e.target.style.backgroundColor === \"white\") {\r\n      e.target.style.backgroundColor = \"black\";\r\n    } else {\r\n      e.target.style.backgroundColor = \"white\";\r\n    }\r\n    if (e.target.style.color === \"black\") {\r\n      e.target.style.color = \"white\";\r\n    } else {\r\n      e.target.style.color = \"black\";\r\n    }\r\n\r\n    const genreIndex = userGenres.indexOf(id);\r\n    if (genreIndex === -1) {\r\n      setUserGenres((prevState) => [...prevState, id]);\r\n    } else {\r\n      setUserGenres((prevState) =>\r\n        prevState.filter((prev_id) => id !== prev_id)\r\n      );\r\n    }\r\n    socket.emit(\"updateGenres\", id);\r\n  };\r\n\r\n  const submitGenres = (e) => {\r\n    e.preventDefault();\r\n\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text:\r\n        \"Once you continue, the whole room will move forward with everyone's currently chosen genres.\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n    }).then((willContinue) => {\r\n      if (willContinue) {\r\n        socket.emit(\"getGenres\");\r\n      }\r\n    });\r\n  };\r\n  // Receive Genres After Submission\r\n  useEffect(() => {\r\n    socket.on(\"receiveGenres\", (receivedGenres) => {\r\n      setUserGenres(receivedGenres);\r\n      history.push(`/match/${slug.name}/${slug.room}/movies`);\r\n    });\r\n  }, [history, slug.name, slug.room]);\r\n\r\n  //                           //\r\n  // MOVIE FUNCTIONS & SOCKETS //\r\n  //                           //\r\n  const toggleMovies = (id, vote) => {\r\n    if (vote === true) {\r\n      // setUserMovies((prevState) => [...prevState, id]);\r\n      console.log(\"added id:\", id);\r\n      socket.emit(\"addMovies\", id);\r\n    }\r\n    // } else {\r\n    //   setUserMovies((prevState) =>\r\n    //     prevState.filter((prev_id) => id !== prev_id)\r\n    //   );\r\n    //   socket.emit(\"removeMovies\", id);\r\n    // }\r\n  };\r\n  const submitMovies = (e) => {\r\n    e.preventDefault();\r\n\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text:\r\n        \"Once you continue, matches will be found based on everyone's current selections.\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n    }).then((willContinue) => {\r\n      if (willContinue) {\r\n        socket.emit(\"getMovies\");\r\n      }\r\n    });\r\n  };\r\n  // Receive Movies After Submission\r\n  useEffect(() => {\r\n    socket.on(\"receiveMovies\", (receivedMovies) => {\r\n      setUserMovies(receivedMovies);\r\n      history.push(`/match/${slug.name}/${slug.room}/result`);\r\n    });\r\n  }, [history, slug.name, slug.room]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`/match/${slug.name}/${slug.room}/movies`}>\r\n        <MatchMovies\r\n          movies={movies}\r\n          setMovies={setMovies}\r\n          toggleMovies={toggleMovies}\r\n          submitMovies={submitMovies}\r\n          userGenres={userGenres}\r\n          rapidApiKey={rapidApiKey}\r\n        />\r\n      </Route>\r\n      <Route path={`/match/${slug.name}/${slug.room}/genres`}>\r\n        <MatchGenres\r\n          genres={genres}\r\n          setGenres={setGenres}\r\n          toggleGenre={toggleGenre}\r\n          submitGenres={submitGenres}\r\n          rapidApiKey={rapidApiKey}\r\n        />\r\n      </Route>\r\n      <Route path={`/match/${slug.name}/${slug.room}/result`}>\r\n        <Result userMovies={userMovies} rapidApiKey={rapidApiKey} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\nexport default Match;\r\n","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Join.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchGenres.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\MatchMovies.js",[],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Result.js",["51"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Result = ({ userMovies, rapidApiKey }) => {\r\n  const [products, setProducts] = useState([]);\r\n\r\n  // Retrieving Matched Movie Details\r\n  useEffect(() => {\r\n    if (userMovies.length !== 0) {\r\n      const promises = userMovies.map((id) => {\r\n        return axios.get(\r\n          `https://api.themoviedb.org/3/movie/${id}?api_key=${rapidApiKey}&language=en-US`\r\n        );\r\n      });\r\n      Promise.all(promises)\r\n        .then((res) => console.log(res))\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [rapidApiKey, userMovies]);\r\n\r\n  if (userMovies.length === 0) {\r\n    return (\r\n      <div className=\"m-auto mt-20 w-80 md:w-1/2\">\r\n        <h1>No matches :(</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"m-auto mt-20 w-80 md:w-1/2\">\r\n        <h1>Here are your matches!</h1>\r\n        {products &&\r\n          products.map((item) => (\r\n            <div key={item.id}>\r\n              <h1>{item.title}</h1>\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w300/${item.poster_path}`}\r\n                alt=\"movie poster\"\r\n              />\r\n              <p>{item.overview}</p>\r\n              <div>\r\n                <p>Released: {item.release_date}</p>\r\n                <p>Language: {item.original_language}</p>\r\n                <p>Rating: {item.vote_average}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Result;\r\n","C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Card.js",["52","53"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { motion, useMotionValue, useAnimation } from \"framer\";\r\n\r\nconst Card = ({ children, onVote, ...props }) => {\r\n  const cardElem = useRef(null);\r\n  const x = useMotionValue(0);\r\n  const controls = useAnimation();\r\n  const rotations = [\r\n    \"rotate-3\",\r\n    \"rotate-6\",\r\n    \"rotate-12\",\r\n    \"-rotate-3\",\r\n    \"-rotate-6\",\r\n    \"-rotate-12\",\r\n  ];\r\n\r\n  const [vote, setVote] = useState(undefined);\r\n  const [constrained, setConstrained] = useState(true);\r\n  const [direction, setDirection] = useState();\r\n  const [velocity, setVelocity] = useState();\r\n\r\n  const generateClassNames = () => {\r\n    return (\r\n      \"absolute bg-gray-200 rounded-2xl w-1/2 md:w-1/3 transform \" +\r\n      rotations[Math.floor(Math.random() * rotations.length)]\r\n    );\r\n  };\r\n\r\n  const getVote = (childNode, parentNode) => {\r\n    const childRect = childNode.getBoundingClientRect();\r\n    const parentRect = parentNode.getBoundingClientRect();\r\n    let result =\r\n      parentRect.left >= childRect.right\r\n        ? false\r\n        : parentRect.right <= childRect.left\r\n        ? true\r\n        : undefined;\r\n    return result;\r\n  };\r\n\r\n  // determine direction of swipe based on velocity\r\n  const getDirection = () => {\r\n    return velocity >= 1 ? \"right\" : velocity <= -1 ? \"left\" : undefined;\r\n  };\r\n\r\n  const getTrajectory = () => {\r\n    setVelocity(x.getVelocity());\r\n    setDirection(getDirection());\r\n  };\r\n\r\n  const flyAway = (min) => {\r\n    const flyAwayDistance = (direction) => {\r\n      const parentWidth = cardElem.current.parentNode.getBoundingClientRect()\r\n        .width;\r\n      const childWidth = cardElem.current.getBoundingClientRect().width;\r\n      return direction === \"left\"\r\n        ? -parentWidth / 2 - childWidth / 2\r\n        : parentWidth / 2 + childWidth / 2;\r\n    };\r\n\r\n    if (direction && Math.abs(velocity) > min) {\r\n      setConstrained(false);\r\n      controls.start({ x: flyAwayDistance(direction) });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribeX = x.onChange(() => {\r\n      const childNode = cardElem.current;\r\n      const parentNode = cardElem.current.parentNode;\r\n      const result = getVote(childNode, parentNode);\r\n      result !== undefined && onVote(result);\r\n    });\r\n\r\n    return () => unsubscribeX();\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      className={generateClassNames()}\r\n      animate={controls}\r\n      dragConstraints={constrained && { left: 0, right: 0, top: 0, bottom: 0 }}\r\n      dragElastic={1}\r\n      ref={cardElem}\r\n      style={{ x }}\r\n      onDrag={getTrajectory}\r\n      onDragEnd={() => flyAway(500)}\r\n      whileTap={{ scale: 1.1 }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n};\r\nexport default Card;\r\n",["54","55"],"C:\\Users\\sdelp\\Documents\\Projects\\netflix-match\\src\\components\\Stack.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":24,"column":16,"nodeType":"62","messageId":"63","endLine":24,"endColumn":23},{"ruleId":"60","severity":1,"message":"64","line":25,"column":16,"nodeType":"62","messageId":"63","endLine":25,"endColumn":23},{"ruleId":"60","severity":1,"message":"65","line":5,"column":20,"nodeType":"62","messageId":"63","endLine":5,"endColumn":31},{"ruleId":"60","severity":1,"message":"66","line":17,"column":10,"nodeType":"62","messageId":"63","endLine":17,"endColumn":14},{"ruleId":"60","severity":1,"message":"67","line":17,"column":16,"nodeType":"62","messageId":"63","endLine":17,"endColumn":23},{"ruleId":"56","replacedBy":"68"},{"ruleId":"58","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'setName' is assigned a value but never used.","Identifier","unusedVar","'setroom' is assigned a value but never used.","'setProducts' is assigned a value but never used.","'vote' is assigned a value but never used.","'setVote' is assigned a value but never used.",["70"],["71"],"no-global-assign","no-unsafe-negation"]